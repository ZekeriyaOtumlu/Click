{"version":3,"sources":["components/Card/Card.js","components/Score/Score.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","name","src","image","id","onClick","shuffleScoreCard","Score","total","status","Wrapper","children","App","state","books","clickedBooksId","score","goal","includes","setState","push","length","console","log","i","j","Math","floor","random","this","map","book","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"06BAaeA,G,MAPF,SAAAC,GAAK,OACd,yBAAKC,UAAU,4BACf,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,GAAIN,EAAMM,GAChDC,QAAS,kBAAMP,EAAMQ,iBAAiBR,EAAMM,KAAKL,UAAU,oBCKlDQ,G,MARD,SAAAT,GAAK,OACf,yBAAKC,UAAU,aACf,wBAAIA,UAAU,SAAd,gBAAoCD,EAAMU,OAC1C,wBAAIT,UAAU,UAAUD,EAAMW,WCJnBC,G,MAFC,SAAAZ,GAAK,OAAK,yBAAKC,UAAU,WAAWD,EAAMa,YCyE3CC,E,2MAlEbC,MAAQ,CACNC,QACAC,eAAe,GACfC,MAAO,EACPC,KAAM,GACNR,OAAO,I,EAKTH,iBAAmB,SAAAF,GACjB,IAAIW,EAAiB,EAAKF,MAAME,eAEhC,GAAGA,EAAeG,SAAUd,GAC1B,EAAKe,SAAS,CAAEJ,eAAe,GAAIC,MAAM,EAAGP,OAAQ,kDADtD,CAME,GAFAM,EAAeK,KAAKhB,GAES,KAA1BW,EAAeM,OAGhB,OAFA,EAAKF,SAAS,CAAEH,MAAM,GAAIP,OAAQ,wDAAyDM,eAAgB,UAC3GO,QAAQC,IAAI,WAId,EAAKJ,SAAS,CAAEL,QAAOC,iBAAgBC,MAAOD,EAAeM,OAAQZ,OAAQ,MAE7E,IAAK,IAAIe,EAAIV,EAAMO,OAAS,EAAGG,EAAG,EAAGA,IAAI,CACvC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAE,IADC,EAEhB,CAACV,EAAMW,GAAIX,EAAMU,IAAvCV,EAAMU,GAFgC,KAE5BV,EAAMW,GAFsB,Q,wEAQpC,IAAD,OACN,OACE,yBAAK1B,UAAU,OACf,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,eACA,uBAAGA,UAAU,aAAb,2CAKF,kBAAC,EAAD,CAAOS,MAAOqB,KAAKhB,MAAMG,MAClBC,KAAM,GACNR,OAAQoB,KAAKhB,MAAMJ,SAE1B,kBAAC,EAAD,KACGoB,KAAKhB,MAAMC,MAAMgB,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CACEzB,iBAAkB,EAAKA,iBACvBF,GAAI2B,EAAK3B,GACT4B,IAAKD,EAAK3B,GACVD,MAAO4B,EAAK5B,iB,GAzDN8B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0fcf3e55.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\n//this component is only rendering the images to the screen and can be a simple render function it is a\r\n//stateless component\r\n\r\nconst Card = props => (\r\n    <div className=\"card img-container hover\">\r\n    <img alt={props.name} src={props.image} id={props.id}\r\n      onClick={() => props.shuffleScoreCard(props.id)} className='shuffleScore'/>\r\n</div>\r\n);\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./Score.css\";\r\n\r\n\r\n// Stateless Components\r\n\r\nconst Score = props => (\r\n    <div className=\"gameScore\">\r\n    <h3 className=\"score\">Your Score : {props.total}</h3>\r\n    <h3 className=\"status\">{props.status}</h3>\r\n  </div>\r\n\r\n)\r\n\r\nexport default Score;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props =>  <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport books from \"./cards.json\";\nimport Card from \"./components/Card\";\nimport Score from \"./components/Score\";\nimport Wrapper from \"./components/Wrapper\";\n\n\nclass App extends Component {\n  // Setting this.state.books \n  state = {\n    books,\n    clickedBooksId:[],\n    score: 0,\n    goal: 12,\n    status:\"\"\n  };\n\n  // Shuffle the book cards in the browser when clicked\n\n  shuffleScoreCard = id =>{\n    let clickedBooksId = this.state.clickedBooksId;\n\n    if(clickedBooksId.includes (id)){\n      this.setState({ clickedBooksId:[], score:0, status: \"Sorry!!! You Lost. Click to Play Again!!!\"});\n      return;\n    } else{\n      clickedBooksId.push(id)\n\n      if(clickedBooksId.length === 12){\n        this.setState({ score:12, status: \"Congratulations!!! You Won!!!. Click to Play Again!!!\", clickedBooksId: []});\n        console.log(\"You Win\");\n        return;\n      }\n\n      this.setState({ books, clickedBooksId, score: clickedBooksId.length, status: \" \"});\n\n      for (let i = books.length - 1; i >0; i--){\n        let j = Math.floor(Math.random() * (i+1));\n        [books[i], books[j]] = [books[j], books[i]];\n      }\n    }\n  }\n\n  //  Map over this.state.cards and render a Card component for each card object\n  render(){\n    return(\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">Clicky Game</h1>\n        <p className=\"App-intro\">\n          Try not to click the same image twice!\n        </p>\n      </header>\n      \n      <Score total={this.state.score}\n             goal={12}\n             status={this.state.status}\n             />\n      <Wrapper>\n        {this.state.books.map(book => (\n          <Card\n            shuffleScoreCard={this.shuffleScoreCard}\n            id={book.id}\n            key={book.id}\n            image={book.image}\n          />\n        ))}\n      </Wrapper>\n   \n  </div>\n  );\n}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}